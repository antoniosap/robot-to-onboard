#!/usr/bin/env python

"""driver.py: MultiWii protocol interface """

__author__ = "Antonio Sapuppo"
__copyright__ = "Copyright 2018"

__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "Antonio Sapuppo"
__email__ = "a.sapuppo@youus.it"
__status__ = "Development"

import rospy

from tf.transformations import euler_from_quaternion
from math import degrees

from nav_msgs.msg import Odometry
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Pose2D

# ---------------------------------------------------------------------
# info sites:
# http://www.multiwii.com/wiki/index.php?title=Multiwii_Serial_Protocol
#
# ---------------------------------------------------------------------
# start:
# conda activate ros-env
# roscore
# test GPS:
# cd /home/antonio/drone-tools/software/cleanflight-configurator/debug/cleanflight-configurator/linux64
# ./cleanflight-configurator
# ---------------------------------------------------------------------

# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each
# covariance matrix, and disregard the associated estimate.
from sensor_msgs.msg import Imu

from pymultiwii import MultiWii

if __name__ == '__main__':
    # registering node in ros master
    pub = rospy.Publisher('imu', Imu, queue_size=10)
    rospy.init_node('uollibot_base', log_level=rospy.DEBUG)
    # begin node code
    rospy.loginfo('Starting uollibot_base')

    board = MultiWii("/dev/ttyUSB0")
    rate = rospy.Rate(10)  # 10hz
    try:
        while not rospy.is_shutdown():
            # MSP_ATTITUDE 108 FC -->
            # angx    INT 16 Range[-1800;1800] (unit: 1 / 10 degree)
            # angy    INT 16 Range[-900;900]   (unit: 1 / 10 degree)
            # heading INT 16 Range[-180;180]
            board.getData(MultiWii.ATTITUDE)
            message = "angx = {:+.2f} \t angy = {:+.2f} \t heading = {:+.2f} \t elapsed = {:+.4f} \t"\
                .format(float(board.attitude['angx']),
                        float(board.attitude['angy']),
                        float(board.attitude['heading']),
                        float(board.attitude['elapsed']))
            rospy.loginfo(message)
            # MSP_RAW_GPS 106 FC -->
            # GPS_FIX           UINT 8  0 or 1
            # GPS_numSat        UINT 8
            # GPS_coord[LAT]    UINT 32 1 / 10 000 000 deg
            # GPS_coord[LON]    UINT 32 1 / 10 000 000 deg
            # GPS_altitude      UINT 16 meter
            # GPS_speed         UINT 16 cm / s
            # GPS_ground_course UINT 16 unit: degree * 10
            #
            board.getData(MultiWii.RAW_GPS)
            message = "fix = {:2d} \t\t numSat = {:2d} \t lat = {:10f} \t lon = {:10f} \t altitude = {:+.2f} \t speed = {:+.2f} \t groudCourse = {:+.2f} \t" \
                .format(board.rawGPS['fix'],
                        board.rawGPS['numSat'],
                        float(board.rawGPS['lat']),
                        float(board.rawGPS['lon']),
                        float(board.rawGPS['altitude']),
                        float(board.rawGPS['speed']),
                        float(board.rawGPS['groudCourse']))
            rospy.loginfo(message)
            #
            rate.sleep()
    except Exception,error:
        rospy.logerr("Error on Main: "+str(error))
    except rospy.ROSInterruptException:
        pass
